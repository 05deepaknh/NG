# -*- coding: utf-8 -*-
"""Copy of NG.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1Lty7YV4gjsu14C-oId4F4CQ_g0X5QzI6
"""

import pandas as pd
import numpy as np
import matplotlib.pyplot as plt

dataset = pd.read_csv('https://raw.githubusercontent.com/05deepaknh/NG/main/Maternal%20Health%20Risk%20Data%20Set.csv')

dataset

dataset['RiskLevel'].unique()

dataset.info()

X = dataset.iloc[:, 1:-1].values 
y = dataset.iloc[:, -1].values

X

y

from sklearn.model_selection import train_test_split
X_train, X_test, y_train, y_test = train_test_split(X, y, test_size = 0.20)
print(len(X_train))
print(len(X_test))
print(len(y_train))
print(len(y_test))

from sklearn.ensemble import RandomForestClassifier
rcla = RandomForestClassifier(n_estimators=500)
rcla.fit(X_train, y_train)

rpred = rcla.predict(X_test)

rpredtrain = rcla.predict(X_train)

for i in range(len(y_test)):
  print(y_test[i], rpred[i])

from sklearn.metrics import accuracy_score, confusion_matrix

rac  = accuracy_score(y_test, rpred)
print("Accuracy: ", rac)

rcm  = confusion_matrix(y_test, rpred)
print("Confusion matrix: ")
print(rcm)

import seaborn as sns

cf_matrix = confusion_matrix(y_test, rpred)
print(cf_matrix)

categories = ['Low', 'Medium','High']
sns.heatmap(cf_matrix, annot=True)

import matplotlib.pyplot as plt
import seaborn as sns
from matplotlib.image import imread
import pathlib

count={'low risk':0, 'mid risk':0, 'high risk':0}
for i in dataset['RiskLevel']:
  if i=='low risk':
    count['low risk']=count['low risk']+1
  elif i=='mid risk':
    count['mid risk']=count['mid risk']+1
  else:
    count['high risk']=count['high risk']+1
print(count)
plt.figure(figsize=(8, 6))
plt.bar(range(len(count)), list(count.values()), align='center')
plt.xticks(range(len(count)), list(count.keys()))
plt.title('Distribution of patient dataset')
plt.xlabel('stage')
plt.ylabel('Total number of cases')
plt.show()

from sklearn.tree import DecisionTreeClassifier
dcla = DecisionTreeClassifier()
dcla.fit(X_train, y_train)
dpred = dcla.predict(X_test)

for i in range(len(y_test)):
  print(y_test[i], dpred[i])

from sklearn.metrics import accuracy_score, confusion_matrix
dac  = accuracy_score(y_test, dpred)
dcm  = confusion_matrix(y_test, dpred)

print("Accuracy: ", dac)
print()
print("Confusion matrix: ")
print(dcm)

from sklearn.svm import SVC
scla = SVC(kernel='rbf')
scla.fit(X_train, y_train)
spred = scla.predict(X_test)

for i in range(len(y_test)):
  print(y_test[i], spred[i])

from sklearn.metrics import accuracy_score, confusion_matrix
sac  = accuracy_score(y_test, spred)
scm  = confusion_matrix(y_test, spred)

print("Accuracy: ", sac)
print()
print("Confusion matrix: ")
print(scm)

from sklearn.linear_model import LogisticRegression
lcla = LogisticRegression()
lcla.fit(X_train, y_train)
lpred = lcla.predict(X_test)

for i in range(len(y_test)):
  print(y_test[i], lpred[i])

from sklearn.metrics import accuracy_score, confusion_matrix
lac  = accuracy_score(y_test, lpred)
lcm  = confusion_matrix(y_test, lpred)

print("Accuracy: ", lac)
print()
print("Confusion matrix: ")
print(lcm)

from sklearn.neighbors import KNeighborsClassifier
kcla = KNeighborsClassifier()
kcla.fit(X_train, y_train)
kpred = kcla.predict(X_test)

for i in range(len(y_test)):
  print(y_test[i], kpred[i])

from sklearn.metrics import accuracy_score, confusion_matrix
dac  = accuracy_score(y_test, kpred)
dcm  = confusion_matrix(y_test, kpred)

print("Accuracy: ", dac)
print()
print("Confusion matrix: ")
print(dcm)

def details():
  data= []
  print('Enter patient report details:')
  
  data.append(int(input('Age: ')))
  data.append(int(input('SystolicBP: ')))
  data.append(int(input('DiastolicBP: ')))
  data.append(float(input('BS: ')))
  data.append(float(input(' BodyTemp: ')))
  data.append(int(input('HeartRate: ')))
  
  return data

def prediction(data):
  data=np.array(data)
  data = np.reshape(data, (1, 5))
  
  pred = rcla.predict(data)
  return pred

print('----------------------------------- Stage Prediction-------------------------------------')
data = details()
print('Possible  Stages: Low, Medium, High')
print('Patient stage: ', prediction(data[1:]))